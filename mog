#!/usr/bin/env python

from __future__ import print_function
import os
try:
    import ConfigParser as configparser
except ImportError:
    import configparser
import sys
import re
import subprocess
from functools import partial

def match_file(regex, name):
    tosearch = subprocess.check_output(['file', name]).decode("utf-8")
    return re.match(regex, tosearch)

def action_arg(action, name):
    os.system('{} {}'.format(action, name))

def settings_get_bool(cfg, value, default):
    try:
        return cfg.getboolean('settings', value)
    except configparser.NoSectionError:
        return default
    except ValueError:
        print("Invalid settings variable {} - should be boolean".format(value))
        sys.exit(1)


def parse_config():
    matches = {'file': match_file,
               'name': re.match}
    actions = {'arg': action_arg}

    # Parse config
    things = configparser.RawConfigParser()
    cfg = os.path.expanduser("~/." + os.path.basename(sys.argv[0]) + "rc")
    things.read(cfg)

    # Extract settings
    settings = {'showname': settings_get_bool(things, 'showname', True)}

    # Extract matches and actions
    things_to_do = []
    for thing in things.sections():
        # Skip settings section
        if thing == 'settings':
            continue
        # Parse others
        bits = things.items(thing)
        match = None
        action = None
        for bit in bits:
            if not match and bit[0] in matches.keys():
                match = partial(matches[bit[0]], bit[1])
            elif not action and bit[0] in actions.keys():
                action = partial(actions[bit[0]], bit[1])
            else:
                print("Invalid config variable {} in section {}".format(bit[0], thing))
                sys.exit(1)
        if match and action:
            things_to_do.append((match, action))

    if len(things_to_do) == 0:
        print("Please define what you want me to do in " + cfg)
    return (settings,things_to_do)

def run_match_action(settings, things_to_do, files):
    if len(things_to_do) > 0:
        for f in files:
            if settings['showname']:
                print('==> {} <=='.format(f))
                sys.stdout.flush()
            for match, action in things_to_do:
                if match(f):
                    action(f)
                    break
            print()
            sys.stdout.flush()

if __name__ == "__main__":
    settings, config = parse_config()
    if len(config) == 0:
        sys.exit(1)
    try:
        run_match_action(settings, config, sys.argv[1:])
    except:
        pass
