#!/usr/bin/env python

from __future__ import print_function
import os
try:
    import ConfigParser as configparser
except ImportError:
    import configparser
import sys
import re
import subprocess
from functools import partial

def match_file(regex, name):
    tosearch = subprocess.check_output(['file', name]).decode("utf-8")
    return re.match(regex, tosearch)

def match_pygmentize(regex, name):
    tosearch = subprocess.check_output(['pygmentize', '-N', name]).decode("utf-8")
    return re.match(regex, tosearch)

def match_inverted(func, regex, name):
    return not func(regex, name)

def action_arg(action, name):
    os.system('{} {}'.format(action, name))

def config_get_bool(cfg, value, default, section='settings'):
    try:
        return cfg.getboolean(section, value)
    except configparser.NoSectionError:
        return default
    except configparser.NoOptionError:
        return default
    except ValueError:
        print("Invalid settings variable {} in section {} - should be boolean".format(value, section))
        sys.exit(1)


def parse_config():
    matches = {'file': match_file,
               'name': re.match,
               'pygmentize': match_pygmentize}
    actions = {'arg': action_arg}

    # Parse config
    things = configparser.RawConfigParser()
    cfg = os.path.expanduser("~/." + os.path.basename(sys.argv[0]) + "rc")
    things.read(cfg)

    # Extract settings
    settings = {'showname': config_get_bool(things, 'showname', True),
                'showsection': config_get_bool(things, 'showsection', False)}

    # Extract matches and actions
    things_to_do = []
    for thing in things.sections():
        # Skip settings section
        if thing == 'settings':
            continue
        # Parse others
        invert_match = config_get_bool(things, 'invert_match', False, thing)
        bits = things.items(thing)
        match = None
        action = None
        for bit in bits:
            if bit[0] == 'invert_match':
                pass # Handled earlier
            elif not match and bit[0] in matches.keys():
                if invert_match:
                    match = partial(match_inverted, matches[bit[0]], bit[1])
                else:
                    match = partial(matches[bit[0]], bit[1])
            elif not action and bit[0] in actions.keys():
                action = partial(actions[bit[0]], bit[1])
            else:
                print("Invalid config variable {} in section {}".format(bit[0], thing))
                sys.exit(1)
        if match and action:
            things_to_do.append((match, action, thing))

    if len(things_to_do) == 0:
        print("Please define what you want me to do in " + cfg)
    return (settings,things_to_do)

def run_match_action(settings, things_to_do, files):
    if len(things_to_do) > 0:
        for f in files:
            for match, action, cfg_section in things_to_do:
                if match(f):
                    if settings['showname']:
                        msg = f
                        if settings['showsection']:
                            msg = "{} [{}]".format(msg, cfg_section)
                        print('==> {} <=='.format(msg))
                        sys.stdout.flush()
                    action(f)
                    print()
                    sys.stdout.flush()
                    break

if __name__ == "__main__":
    settings, config = parse_config()
    if len(config) == 0:
        sys.exit(1)
    try:
        run_match_action(settings, config, sys.argv[1:])
    except:
        pass
